# serverless.yml

service: Inventory-API

custom:
  inventoryTableName: 'inventory-table-0.6-${self:provider.stage}'
  siteTableName: 'site-table-0.6-${self:provider.stage}'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-north-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["InventoryDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["SiteDynamoDBTable", "Arn" ] }
  environment:
    INVENTORY_TABLE: ${self:custom.inventoryTableName}
    SITE_TABLE: ${self:custom.siteTableName}

functions:
  getInventory:
    handler: inventory/get.get
    events:
      - http:
          path: inventory/{id}
          method: get
          cors: true

  createInventory:
    handler: inventory/create.create
    events:
      - http:
          path: inventory/add
          method: post
          cors: true

  createInventoryInAllSites:
    handler: inventory/createInAllSites.createInAllSites
    events:
      - http:
          path: inventory/create
          method: post
          cors: true

  getSite:
    handler: site/get.get
    events:
      - http:
          path: site/{id}
          method: get
          cors: true

  createSite:
    handler: site/create.create
    events:
      - http:
          path: site/add
          method: post
          cors: true

  deleteSite:
    handler: site/updateDeleted.delete
    events:
      - http:
          path: site/delete/{id}
          method: post
          cors: true

  activateSite:
    handler: site/updateDeleted.reactivate
    events:
      - http:
          path: site/reactivate/{id}
          method: post
          cors: true

  deleteInventory:
    handler: inventory/updateDeleted.delete
    events:
      - http:
          path: inventory/delete
          method: post
          cors: true

  activateInventory:
    handler: inventory/updateDeleted.reactivate
    events:
      - http:
          path: inventory/reactivate
          method: post
          cors: true

  amountInventory:
    handler: inventory/updateAmount.updateAmount
    events:
      - http:
          path: inventory/amount
          method: post
          cors: true


resources:
  Resources:
    InventoryDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.inventoryTableName}

    SiteDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: siteId
            AttributeType: S
        KeySchema:
          -
            AttributeName: siteId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.siteTableName}